{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Publish this to Github Pages mkdocs gh-deploy will publish whatever the branch you are currently working on. It will probably be cool to have a GitHub action.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#publish-this-to-github-pages","text":"mkdocs gh-deploy will publish whatever the branch you are currently working on. It will probably be cool to have a GitHub action.","title":"Publish this to Github Pages"},{"location":"dataproducer-1/","text":"Dataproducer 1 Components Temperature and humidity sensor LCD screen ESP-01 Flux","title":"Dataproducer 1"},{"location":"dataproducer-1/#dataproducer-1","text":"","title":"Dataproducer 1"},{"location":"dataproducer-1/#components","text":"Temperature and humidity sensor LCD screen ESP-01","title":"Components"},{"location":"dataproducer-1/#flux","text":"","title":"Flux"},{"location":"dataproducer-2/","text":"Data producer 2 Components ESP-01 I2C bus Accelerotmeter LCD display Flux","title":"Data producer 2"},{"location":"dataproducer-2/#data-producer-2","text":"","title":"Data producer 2"},{"location":"dataproducer-2/#components","text":"ESP-01 I2C bus Accelerotmeter LCD display","title":"Components"},{"location":"dataproducer-2/#flux","text":"","title":"Flux"},{"location":"mqtt/","text":"MQTT Broker First analysis Components NodeMCU module I2C bus MCP23017 Segment LED bar Flux","title":"MQTT Broker"},{"location":"mqtt/#mqtt-broker","text":"","title":"MQTT Broker"},{"location":"mqtt/#first-analysis","text":"","title":"First analysis"},{"location":"mqtt/#components","text":"NodeMCU module I2C bus MCP23017 Segment LED bar","title":"Components"},{"location":"mqtt/#flux","text":"","title":"Flux"},{"location":"esp-01/dh11/","text":"Humidity Sensor DH11 How it works How to connect to ESP-01 How to program it The following code can be found at dh11.cpp . #include <dht11.h> dht11 DHT; // Pin 4 of Arduino to Data of DHT11 #define DHT11_PIN 4 void setup() { Serial.begin(9600); int check; Serial.print(\u201cDHT11 STATUS \u2013 \\t\u201d); check = DHT.read(DHT11_PIN); // check status switch (check) { case DHTLIB_OK: Serial.print(\u201cOK\\n\u201d); break; case DHTLIB_ERROR_CHECKSUM: Serial.print(\u201cChecksum error \\n\u201d); break; case DHTLIB_ERROR_TIMEOUT: Serial.print(\u201cTimeout error \\n\u201d); break; default: Serial.print(\u201cUnknown error \\n\u201d); break; } } void loop() { // humidity and temperature output Serial.print(\u201cHumidity is \u201c); Serial.print(DHT.humidity, 1); Serial.print(\u201c\\n\u201d); Serial.println(\u201cTemperature is \u201c); Serial.println(DHT.temperature, 1); delay(1000); }","title":"Humidity Sensor DH11"},{"location":"esp-01/dh11/#humidity-sensor-dh11","text":"","title":"Humidity Sensor DH11"},{"location":"esp-01/dh11/#how-it-works","text":"","title":"How it works"},{"location":"esp-01/dh11/#how-to-connect-to-esp-01","text":"","title":"How to connect to ESP-01"},{"location":"esp-01/dh11/#how-to-program-it","text":"The following code can be found at dh11.cpp . #include <dht11.h> dht11 DHT; // Pin 4 of Arduino to Data of DHT11 #define DHT11_PIN 4 void setup() { Serial.begin(9600); int check; Serial.print(\u201cDHT11 STATUS \u2013 \\t\u201d); check = DHT.read(DHT11_PIN); // check status switch (check) { case DHTLIB_OK: Serial.print(\u201cOK\\n\u201d); break; case DHTLIB_ERROR_CHECKSUM: Serial.print(\u201cChecksum error \\n\u201d); break; case DHTLIB_ERROR_TIMEOUT: Serial.print(\u201cTimeout error \\n\u201d); break; default: Serial.print(\u201cUnknown error \\n\u201d); break; } } void loop() { // humidity and temperature output Serial.print(\u201cHumidity is \u201c); Serial.print(DHT.humidity, 1); Serial.print(\u201c\\n\u201d); Serial.println(\u201cTemperature is \u201c); Serial.println(DHT.temperature, 1); delay(1000); }","title":"How to program it"},{"location":"esp-01/getting-started/","text":"Getting Started This file how to program in ESP-01. Configure Arduino IDE Click Ctrl+, to open the configuration. Paste https://arduino.esp8266.com/stable/package_esp8266com_index.json into Additional Boards Manager URLs. Then, at Tools > Boards > Boards manager you can download the board. Don't forget to put the board as aa esp8266! Connect USB device to ESP01 The correct orientation of ESP is: The switch button defines the state of the connection. Developer mode to compile and put the code into the ESP01. Supplier mode. The usb provides the energy to the ESP01.","title":"Getting Started"},{"location":"esp-01/getting-started/#getting-started","text":"This file how to program in ESP-01.","title":"Getting Started"},{"location":"esp-01/getting-started/#configure-arduino-ide","text":"Click Ctrl+, to open the configuration. Paste https://arduino.esp8266.com/stable/package_esp8266com_index.json into Additional Boards Manager URLs. Then, at Tools > Boards > Boards manager you can download the board. Don't forget to put the board as aa esp8266!","title":"Configure Arduino IDE"},{"location":"esp-01/getting-started/#connect-usb-device-to-esp01","text":"The correct orientation of ESP is: The switch button defines the state of the connection. Developer mode to compile and put the code into the ESP01. Supplier mode. The usb provides the energy to the ESP01.","title":"Connect USB device to ESP01"}]}